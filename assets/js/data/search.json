[
  
  {
    "title": "Automate Email Alerts in Google Sheets using Google Apps Script",
    "url": "/posts/Auto-Email-Notification-en/",
    "categories": "Tutorials, Automation",
    "tags": "Javascript, Google Sheets, App Scripts, Gmail, Notification",
    "date": "2023-09-27 16:24:00 +0100",
    





    
    "snippet": "What Is a Google Apps Script?Google Apps Script is a versatile tool for automating tasks and integrating various Google Workspace apps, like Gmail, Calendar, Drive, and more. It’s powered by modern...",
    "content": "What Is a Google Apps Script?Google Apps Script is a versatile tool for automating tasks and integrating various Google Workspace apps, like Gmail, Calendar, Drive, and more. It’s powered by modern JavaScript and comes with a built-in code editor in your browser. Plus, your scripts run on Google’s servers, so no need for installations.In this guide, you’ll learn how to set up automatic email notifications in Google Sheets using Apps Script. In particular, you will create a function that sends renewal email alerts when the renewal date is 45 days away from the current day. Follow the steps below to get started:Step 1: Create a Google SheetBegin by creating a new Google Sheet or open an existing one where you want to manage contract expiration.  Step 2: Set Up Your DataIn your Google Sheet, create a table with columns for relevant contract information, such as Contract Name, Start Date, End Date, and Client Contact. Input your contract details into this table.Step 3:  Access the Script EditorFrom the Google Sheet interface, navigate to “Extensions” and select “Apps Script” to access the Google Apps Script editor. A new tab will appear, presenting you with a blank project.Step 4: ScriptingIn the script editor, replace the existing function with the provided code below. Be sure to rename the script project by clicking on “Untitled Project” in the upper left corner.    /**     * Author: Manuel F. Pedro     * Date: 2023-09-27     * Description: This function reads a Google Sheets file and sends renewal notifications from to users when the renewal date is within 45 days.     */        function sendNotification() {      // Define the sheet where your data is located      const sheet = SpreadsheetApp.getActiveSpreadsheet();          // Get the data range      const dataRange = sheet.getDataRange();      const values = dataRange.getValues();      const headers = values[0]; // Assuming the first row contains headers          // Get the current date       const currentDate = new Date();          // Loop through each row in the data (starting from the 2nd row)      for (let i = 1; i &lt; values.length; i++) {        const row = values[i];            // Get the supplier's name (first column)        const supplierName = row[0];            // Loop through each column (starting from the 2nd column)        for (let j = 1; j &lt; row.length; j++) {              // Check if the cell contains a date          if (row[j] instanceof Date) {            const renewalDate = row[j];                // Calculate the number of days until renewal            const daysUntilRenewal = calculateDaysDifference(renewalDate, currentDate);                // Check if it's 45 days until renewal            if (daysUntilRenewal === 45) {                  // Get the column header as the subject              const columnHeader = headers[j];                  // Compose the email subject and message              const subject = `Renewal Notification - ${supplierName}`;              const message = `The ${columnHeader} for ${supplierName} will occur in 45 days from today (${renewalDate.toDateString()}).`;                  // Log email notification details              console.log(`Email sent: Subject - ${subject}, Message - ${message}`);                  // Send an email notification, uncomment the line below  when ready to send the message              //MailApp.sendEmail('recipient_example@email.com', subject, message);            }          }        }      }    }    // Log when the script completes    console.log(\"Script execution completed.\");        // Function to calculate days between two dates    function calculateDaysDifference(finalDate, initialDate) {      const millisecondsPerDay = 1000 * 60 * 60 * 24;      const timeDifference = finalDate - initialDate; // it yields the time interval between these dates in milliseconds.      return Math.floor(timeDifference / millisecondsPerDay); // it rounds it down to the nearest whole number     }Step 5: Save and Execute the ScriptSave the code by clicking the archive icon at the top of the code editor. Then, click “Run” to execute the script. You may need to authorize the script to access your Google Sheets and send emails.If executed correctly, and provided that your sample data file contains expiration dates set 45 days ahead of the current date, your output should resemble the following:Step 6: Testing the ScriptBefore entrusting the script with important reminders, conduct a trial run using sample data.Return to your code. Remove the ‘//’ symbols from line 50 and replace the example email with your own.Execute the script and inspect your email inbox for a notification bearing the subject line “Renewal Notification”Step 7: Set TriggersTo automate the script, set up triggers to run it at specific intervals. Go to the left panel and select “Triggers.”Click the “Add Trigger” button and configure a time-driven event source trigger to run sendNotificationfunction daily.Step 8: Monitor and RefineKeep an eye on the script’s performance and make refinements as necessary. You can add more conditions or customize email messages to meet your specific needs.Final remarksAutomating tasks with Google Sheets and Apps Script can save time and ensure deadlines are met. Consider various scenarios where automated email notifications can be beneficial.  Inventory Management: Send notifications when stock levels are low or out of stock.  Project Management: Send reminders for project deadlines and milestones.  Payment Reminders: Automate reminders for overdue invoices.  Employee Contracts: Alert managers when employee contracts are about to expire.  Performance Metrics: Share weekly or monthly performance reports with stakeholders.  Customer Birthdays/Anniversaries: Send personalized greetings to loyal customers.For a deeper dive, check out the code example. Enjoy the journey of experimenting and automating your tasks!Sources” Google Apps Script Overview .” Google Developers, Google, developers.google.com/apps-script/overview."
  }
  
]

